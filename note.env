import './cardsplitright.css';
import { useNavigate } from 'react-router-dom';

export const CardSplitRightImage = ({ title, description, image, redirect }) => {
  const navigate = useNavigate();

  return (
    <div className="cardsplit__container">
      <div className="cardsplit__text">
        <h1>{title}</h1>
        <p dangerouslySetInnerHTML={{ __html: description }} />
      </div>
      <div className="cardsplit__image">
        <img src={image} alt={title} />
      </div>
    </div>
  );
};


.cardsplit__container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 1500px;
    height: 500px;
    gap: 48px;
  }
  
  .cardsplit__text {
    width: 627px;
    display: flex;
    flex-direction: column;
    gap: 24px;
    color: white;
  }
  
  .cardsplit__text h1 {
    font-size: 48px;
    font-weight: bold;
    font-family: 'Montserrat', sans-serif;
    margin: 0;
  }
  
  .cardsplit__text p {
    font-size: 20px;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
    margin: 0;
  }
  
  .cardsplit__text button {
    width: 185px;
    height: 53px;
    padding: 13px 12px;
    border-radius: 48px;
    background-color: white;
    color: #050A30;
    font-size: 24px;
    font-weight: 300;
    font-family: 'Montserrat', sans-serif;
    border: none;
    cursor: pointer;
  }
  
  .cardsplit__image {
    width: 750px;
    height: 440px;
    overflow: hidden;
    border-radius: 24px;
  }
  
  .cardsplit__image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  


import './cardsplitleft.css';
import { useNavigate } from 'react-router-dom';

export const CardSplitLeftImage = ({ title, description, image, }) => {
  const navigate = useNavigate();

  return (
    <div className="cardsplit__container cardsplit__reverse">
      <div className="cardsplit__image">
        <img src={image} alt={title} />
      </div>
      <div className="cardsplit__text">
        <h1>{title}</h1>
        <p dangerouslySetInnerHTML={{ __html: description }} />
        </div>
    </div>
  );
};

.cardsplit__container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 1500px;
    height: 500px;
    gap: 48px;
  }
  
  .cardsplit__text {
    width: 627px;
    display: flex;
    flex-direction: column;
    gap: 24px;
    color: white;
  }
  
  .cardsplit__text h1 {
    font-size: 24px;
    font-weight: bold;
    font-family: 'Montserrat', sans-serif;
    margin: 0;
  }
  
  .cardsplit__text p {
    font-size: 20px;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
    margin: 0;
  }
  
  .cardsplit__text button {
    width: 185px;
    height: 53px;
    padding: 13px 12px;
    border-radius: 48px;
    background-color: white;
    color: #050A30;
    font-size: 24px;
    font-weight: 300;
    font-family: 'Montserrat', sans-serif;
    border: none;
    cursor: pointer;
  }
  
  .cardsplit__image {
    width: 750px;
    height: 440px;
    overflow: hidden;
    border-radius: 24px;
  }
  
  .cardsplit__image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  


import './headline.css';

export const HeadLine = ({title,description}) => {
  return (
    <div className='headline__layout'>
<h1><span className="headline__text">{title}</span></h1>
<p dangerouslySetInnerHTML={{ __html: description }} />
    </div>
  );
};

.headline__layout{
    background-color: transparent !important;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
}
.headline__layout h1{
    font-weight: bold;
    font-size: 64px;
    max-width: 1500px;
    width: 100%;
}
.headline__layout p{
    font-size: 24px;
    font-weight: 400;
    max-width: 1500px;
    
}
.headline__text {
    position: relative;
    display: inline-block;
  }
  
  .headline__text::after {
    content: "";
    position: absolute;
    bottom: -20px;
    left: 0;
    width: 100%;
    height: 5px;
    background-color: gray;
  }


import './TextCard.css'
export const TextCard = ({ title, description}) => {
    return(
        <div className="text__card">
          {title && <p className="text__card--title">{title}</p>}
          {description && <p>{description}</p>}
        </div>
    )
}
.text__card{
    max-width: 1500px;
    font-size: 24px;
    color: white;
}
.text__card--title{
    font-weight: bold;
}

import { useNavigate } from 'react-router-dom';
import './WhiteButton.css'
export const WhiteButton = ({ text, redirect }) => {
    const navigate = useNavigate();

    return(
        <button 
          className='white__button'
          onClick={() => navigate(redirect)}
        >
          {text}
        </button>
    )
}


  .white__button{
    width: 185px;
    height: 53px;
    padding: 13px 12px;
    border-radius: 48px;
    background-color: white;
    color: #050A30;
    font-size: 24px;
    font-weight: 300;
    font-family: 'Montserrat', sans-serif;
  }


































  // Membership.jsx
import React, { useEffect, useState } from "react";
import './membership.css';

import { CardSplitRightImage } from '../../layouts/cardsplitright/cardsplitright.js';
import { CardSplitLeftImage } from '../../layouts/cardsplitleft/cardsplitleft.js';
import { HeadLine } from '../../layouts/headline/headline.js';
import { TextCard } from '../../layouts/textcard/TextCard.js';
import { WhiteButton } from '../../layouts/whitebutton/WhiteButton.js';

const Membership = () => {
  const [cards, setCards] = useState([]);
  const [loading, setLoading] = useState(true);

  const [editingCard, setEditingCard] = useState(null);
  const [editFields, setEditFields] = useState({});
  const [editKey, setEditKey] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);

  useEffect(() => {
    fetch("https://centerupui-default-rtdb.firebaseio.com/Membership.json")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        if (!data) {
          setCards([]);
          setLoading(false);
          return;
        }
        const cardsArray = Object.entries(data).map(([key, value]) => ({ key, ...value }));
        cardsArray.sort((a, b) => a.Order - b.Order);
        setCards(cardsArray);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, []);

  if (loading) return <div>Loading membership program...</div>;

  const renderCardPreview = (card) => {
    switch (card.CardType) {
      case "CardSplitLeftImage":
        return (
          <CardSplitLeftImage
            title={card.title}
            description={card.description}
            image={card.image}
          />
        );
      case "CardSplitRightImage":
        return (
          <CardSplitRightImage
            title={card.title}
            description={card.description}
            image={card.image}
          />
        );
      case "HeadLine":
        return (
          <HeadLine
            title={card.title}
            description={card.description}
          />
        );
      case "TextCard":
        return (
          <TextCard
            title={card.title}
            description={card.description}
          />
        );
      case "WhiteButton":
        return (
          <WhiteButton
            text={card.text}
            redirect={card.redirect}
          />
        );
      default:
        return <div>Unknown card type</div>;
    }
  };

  const openEditModal = (card) => {
    setEditingCard(card);
    setEditKey(card.key);
    let fields = {};
    switch (card.CardType) {
      case "CardSplitLeftImage":
      case "CardSplitRightImage":
        fields = {
          title: card.title || '',
          description: card.description || '',
          image: card.image || '',
          Order: card.Order || 0,
        };
        break;
      case "HeadLine":
      case "TextCard":
        fields = {
          title: card.title || '',
          description: card.description || '',
          Order: card.Order || 0,
        };
        break;
      case "WhiteButton":
        fields = {
          text: card.text || '',
          redirect: card.redirect || '',
          Order: card.Order || 0,
        };
        break;
      default:
        fields = {};
    }
    setEditFields(fields);
    setModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditFields((prev) => ({ ...prev, [name]: value }));
  };

  const handleSave = () => {
    if (!editKey) return;
    const updatedCard = {
      ...editingCard,
      ...editFields,
    };

    fetch(`https://centerupui-default-rtdb.firebaseio.com/Membership/${editKey}.json`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedCard),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to update card");
        }
        return response.json();
      })
      .then(() => {
        setCards((prevCards) =>
          prevCards.map((card) => (card.key === editKey ? updatedCard : card))
        );
        setModalOpen(false);
        setEditingCard(null);
        setEditKey(null);
        setEditFields({});
      })
      .catch((error) => {
        alert("Error saving card: " + error.message);
      });
  };

  const handleDelete = (key) => {
    if (!window.confirm("Are you sure you want to delete this card?")) return;

    fetch(`https://centerupui-default-rtdb.firebaseio.com/Membership/${key}.json`, {
      method: "DELETE",
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to delete card");
        }
        setCards((prevCards) => prevCards.filter((card) => card.key !== key));
      })
      .catch((error) => {
        alert("Error deleting card: " + error.message);
      });
  };

  const getModalSizeStyle = (cardType) => {
    switch (cardType) {
      case "CardSplitLeftImage":
      case "CardSplitRightImage":
        return { width: '1500px', height: '500px' };
      case "HeadLine":
      case "TextCard":
        return { width: '800px', height: '300px' };
      case "WhiteButton":
        return { width: '400px', height: '150px' };
      default:
        return { width: '600px', height: '400px' };
    }
  };

  return (
    <div className="membership-page">
      <div className="membership-page__background">
        <h1 className="membership-page__title">Membership</h1>
        <p className="membership-page__description">
          Nemo enim ipsam voluptatem qmagni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem. Nemo enim ipsam voluptatem quia voluptas sit aspernatur 
          aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut 
          odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem.
        </p>
      </div>

      <div className="membership-page__cards">
        {cards.map((card) => (
          <div key={card.key} className="membership-card-wrapper" style={{ position: 'relative', marginBottom: '2rem' }}>
            {renderCardPreview(card)}

            <div style={{ marginTop: '0.5rem', display: 'flex', gap: '10px' }}>
              <button onClick={() => openEditModal(card)}>Edit</button>
              <button onClick={() => handleDelete(card.key)} style={{ color: 'red' }}>Delete</button>
            </div>
          </div>
        ))}
      </div>

      {modalOpen && (
        <div className="modal-overlay" style={{
          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center',
          zIndex: 1000,
        }}
          onClick={() => setModalOpen(false)}
        >
          <div
            className="modal-content"
            style={{
              backgroundColor: 'white',
              padding: '1rem',
              borderRadius: '8px',
              overflowY: 'auto',
              position: 'relative',
              ...getModalSizeStyle(editingCard.CardType),
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <h2>Edit Card</h2>

            <div style={{ marginBottom: '1rem' }}>
              {renderCardPreview({ ...editingCard, ...editFields })}
            </div>

            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleSave();
              }}
            >
              {(editingCard.CardType === "CardSplitLeftImage" || editingCard.CardType === "CardSplitRightImage") && (
                <>
                  <label>
                    Title:
                    <input
                      type="text"
                      name="title"
                      value={editFields.title}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Description:
                    <textarea
                      name="description"
                      value={editFields.description}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Image URL:
                    <input
                      type="text"
                      name="image"
                      value={editFields.image}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Order:
                    <input
                      type="number"
                      name="Order"
                      value={editFields.Order}
                      onChange={handleChange}
                    />
                  </label>
                </>
              )}

              {(editingCard.CardType === "HeadLine" || editingCard.CardType === "TextCard") && (
                <>
                  <label>
                    Title:
                    <input
                      type="text"
                      name="title"
                      value={editFields.title}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Description:
                    <textarea
                      name="description"
                      value={editFields.description}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Order:
                    <input
                      type="number"
                      name="Order"
                      value={editFields.Order}
                      onChange={handleChange}
                    />
                  </label>
                </>
              )}

              {editingCard.CardType === "WhiteButton" && (
                <>
                  <label>
                    Text:
                    <input
                      type="text"
                      name="text"
                      value={editFields.text}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Redirect URL:
                    <input
                      type="text"
                      name="redirect"
                      value={editFields.redirect}
                      onChange={handleChange}
                    />
                  </label>
                  <label>
                    Order:
                    <input
                      type="number"
                      name="Order"
                      value={editFields.Order}
                      onChange={handleChange}
                    />
                  </label>
                </>
              )}

              <button type="submit">Save</button>
              <button
                type="button"
                onClick={() => setModalOpen(false)}
                style={{ marginLeft: '10px' }}
              >
                Cancel
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Membership;














axmax kku

import React, { useEffect, useState } from "react";
import './membership.css';

import { CardSplitRightImage } from '../../layouts/cardsplitright/cardsplitright.js';
import { CardSplitLeftImage } from '../../layouts/cardsplitleft/cardsplitleft.js';
import { HeadLine } from '../../layouts/headline/headline.js';
import { TextCard } from '../../layouts/textcard/TextCard.js';
import { WhiteButton } from '../../layouts/whitebutton/WhiteButton.js';

const Membership = () => {
  const [cards, setCards] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("https://centerupui-default-rtdb.firebaseio.com/Membership.json")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        const cardsArray = Object.entries(data).map(([key, value]) => value);
        cardsArray.sort((a, b) => a.Order - b.Order);
        setCards(cardsArray);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, []);

  if (loading) return <div>Loading membership program...</div>;

  return (
    <div className="membership-page">
      <div className="membership-page__background">
        <h1 className="membership-page__title">Membership</h1>
        <p className="membership-page__description">
          Nemo enim ipsam voluptatem qmagni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem. Nemo enim ipsam voluptatem quia voluptas sit aspernatur 
          aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut 
          odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. 
          Neque porro quisquam est, qui dolorem.
        </p>
      </div>

      <div className="membership-page__cards">
        {cards.map((card, index) => {
          switch (card.CardType) {
            case "CardSplitLeftImage":
              return (
                <CardSplitLeftImage
                  key={index}
                  title={card.title}
                  description={card.description}
                  image={card.image}
                />
              );
            case "CardSplitRightImage":
              return (
                <CardSplitRightImage
                  key={index}
                  title={card.title}
                  description={card.description}
                  image={card.image}
                />
              );
            case "HeadLine":
              return (
                <HeadLine
                  key={index}
                  title={card.title}
                  description={card.description}
                />
              );
            case "TextCard":
              return (
                <TextCard
                  key={index}
                  title={card.title}
                  description={card.description}
                />
              );
            case "WhiteButton":
              return (
                <WhiteButton
                  key={index}
                  text={card.text}
                  redirect={card.redirect}
                />
              );
            default:
              return null;
          }
        })}
      </div>
    </div>
  );
};

export default Membership;